{
  "gptOutput": "\n// PLOP_CODE_START\nimport fs from 'fs');\n\n/**\n * DeleteFunctionBody (un string, le path du fichier qu'on veut modifier), seq (un string, le marqueur qui détermine si on efface le contenu du body de la fonction, ou pas.)\n * \n * But de cette fonction: Vide le body des fonctions ayant seq dans leur body.\n * Retourne: le code_source modifié, ou null si erreur. \n */\nfunction DeleteFunctionBody(filePath, seq) {\n  let code_source = fs.readFileSync(filePath, 'utf-8');\n  let seq_index = code_source.indexOf(seq);\n  let seq_end_index = seq_index + seq.length;\n  let end_func_index = code_source.substr(seq_end_index).search(/\\n\\S/);\n  \n  // effacer le body de la fonction\n  code_source = code_source.substring(0, seq_end_index) + code_source.substring(seq_end_index + end_func_index);\n  \n  // sauvegarder les changements dans le fichier\n  fs.writeFileSync(filePath, code_source);\n\n  return code_source;\n}\n\n// PLOP_CODE_END\n\n// PLOP_CODE_USE_START\nconst DeleteFunctionBodyValue = DeleteFunctionBody('./myfile.js', 'my-seq');\n// PLOP_CODE_USE_END\n\n// PLOP_CODE_USE_RETURN_START\nreturn DeleteFunctionBodyValue;\n// PLOP_CODE_USE_RETURN_END\n\n// PLOP_CODE_EXTENSION_START\njs\n// PLOP_CODE_EXTENSION_END\n\n// PLOP_CODE_EXPORT_START\nmodule.exports = DeleteFunctionBody;\n// PLOP_CODE_EXPORT_END\n\n// PLOP_CODE_IMPORT_START\nconst DeleteFunctionBody = require('plop-templates/Thing/actions/DeleteFunctionBody/DeleteFunctionBody');\n// PLOP_CODE_IMPORT_END\n\n// PLOP_CODE_IMPORT_RELATIVE_START\nconst DeleteFunctionBody = require('../../plop-templates/Thing/actions/DeleteFunctionBody/DeleteFunctionBody';\n// PLOP_CODE_IMPORT_RELATIVE_END\n\n// PLOP_COMMAND_LINE_INSTALL_START\n# Installer les dépendances utilisées par cette fonction\nyarn add fs\n// PLOP_COMMAND_LINE_INSTALL_END\n\n// PLOP_INSPIRING_MESSAGE_START\n\"Imagine who you could be if you learned and applied the things you'​re capable of learning\" - Unknown\n// PLOP_INSPIRING_MESSAGE_END",
  "mainCode": [
    "import fs from 'fs');\n\n/**\n * DeleteFunctionBody (un string, le path du fichier qu'on veut modifier), seq (un string, le marqueur qui détermine si on efface le contenu du body de la fonction, ou pas.)\n * \n * But de cette fonction: Vide le body des fonctions ayant seq dans leur body.\n * Retourne: le code_source modifié, ou null si erreur. \n */\nfunction DeleteFunctionBody(filePath, seq) {\n  let code_source = fs.readFileSync(filePath, 'utf-8');\n  let seq_index = code_source.indexOf(seq);\n  let seq_end_index = seq_index + seq.length;\n  let end_func_index = code_source.substr(seq_end_index).search(/\\n\\S/);\n  \n  // effacer le body de la fonction\n  code_source = code_source.substring(0, seq_end_index) + code_source.substring(seq_end_index + end_func_index);\n  \n  // sauvegarder les changements dans le fichier\n  fs.writeFileSync(filePath, code_source;\n\n  return code_source;\n}"
  ],
  "codeUsage": [
    "const DeleteFunctionBodyValue = DeleteFunctionBody('./myfile.js', 'my-seq');"
  ],
  "codeExtension": ["js"],
  "inspiringMessage": [
    "\"Imagine who you could be if you learned and applied the things you'​re capable of learning\" - Unknown"
  ],
  "codeImport": [
    "import DeleteFunctionBody from 'plop-templates/Thing/actions/DeleteFunctionBody/DeleteFunctionBody';"
  ],
  "codeExport": ["module.exports = DeleteFunctionBody;"],
  "codeImportRelative": [
    "import DeleteFunctionBody from '../../plop-templates/Thing/actions/DeleteFunctionBody/DeleteFunctionBody';"
  ],
  "codeUsageReturn": ["return DeleteFunctionBodyValue;"],
  "codeInstall": [
    "# Installer les dépendances utilisées par cette fonction\nyarn add fs"
  ],
  "get_ai_service_language": "node",
  "get_ai_service_args": "filePath (un string, le path du fichier qu'on veut modifier), seq (un string, le marqueur qui détermine si on efface le contenu du body de la fonction, ou pas.)",
  "get_ai_service_description": "Vide le body des fonctions ayant seq dans leur body.",
  "get_ai_service_return_value": "crée une variable code_source = <le contenu du fichier situé path filePath>. crée une constante seq_index = <l'index de seq dans code_source, avec .indexOf>. Crée une constante seq_end_index = <l'index du charactère situé tout juste après seq, dans code_source>. Crée une constante end_func_index = <l'index de \"\\n<anything other than empty space>\", dans code_source>. Efface le contenu commençant à seq_end_index, et se terminant à end_func_index, dans code_source. Sauvegarde ces changements dans le fichier situé path filePath. Retourne le code_source modifié, ou null si erreur."
}
