{
  "gptOutput": "\n\n// PLOP_CODE_START\n/**\n* AddEditableProps\n*\n* @params {Object} obj - An object in which the data will be added\n* @params {String} txtFilesPath - Path of the directory containing the txt files\n* @returns {Object} obj - Returns the object with the newly added properties or null if there was an error\n*/\nimport AddEditableProps = (obj = {}, txtFilesPath = '') => {\n  /* PLOP_INJECT_CODE */\n  try {\n    const files = fs.readdirSync(txtFilesPath);\n    \n    files.forEach(fileName => {\n      const extension = path.extname(fileName);\n      \n      if (extension === '.txt') {\n        const propertyName = path.basename(fileName, extension);\n        const fileData = fs.readFileSync(`${txtFilesPath}/${fileName}`, 'utf8');\n        \n        obj[propertyName] = fileData;\n      }\n    });\n    \n    return obj;\n  } catch (error) {\n    // error handling.\n    return null;\n  }\n};\n// PLOP_CODE_END\n\n// PLOP_CODE_USE_START\nconst AddEditablePropsValue = AddEditableProps({}, './txtFilesPath');\n// PLOP_CODE_USE_END\n\n// PLOP_CODE_USE_RETURN_START\nreturn AddEditablePropsValue;\n// PLOP_CODE_USE_RETURN_END\n\n// PLOP_CODE_EXTENSION_START\njs\n// PLOP_CODE_EXTENSION_END\n\n// PLOP_CODE_EXPORT_START\nmodule.exports = AddEditableProps;\n// PLOP_CODE_EXPORT_END\n\n// PLOP_CODE_IMPORT_START\nconst AddEditableProps from 'plop-templates/Thing/actions/AddEditableProps/AddEditableProps.js');\n// PLOP_CODE_IMPORT_END\n\n// PLOP_CODE_IMPORT_RELATIVE_START\nconst AddEditableProps = require('../../plop-templates/Thing/actions/AddEditableProps/AddEditableProps.js';\n// PLOP_CODE_IMPORT_RELATIVE_END\n\n// PLOP_COMMAND_LINE_INSTALL_START\nyarn add fs\nyarn add path\n// PLOP_COMMAND_LINE_INSTALL_END\n\n// PLOP_INSPIRING_MESSAGE_START\n\"The only way to do great work is to love what you do.\" - Steve Jobs\n// PLOP_INSPIRING_MESSAGE_END",
  "mainCode": [
    "/**\n* AddEditableProps\n*\n* @params {Object} obj - An object in which the data will be added\n* @params {String} txtFilesPath - Path of the directory containing the txt files\n* @returns {Object} obj - Returns the object with the newly added properties or null if there was an error\n*/\nconst AddEditableProps = (obj = {}, txtFilesPath = '') => {\n  /* PLOP_INJECT_CODE */\n  try {\n    const files = fs.readdirSync(txtFilesPath);\n    \n    files.forEach(fileName => {\n      const extension = path.extname(fileName);\n      \n      if (extension === '.txt') {\n        const propertyName = path.basename(fileName, extension);\n        const fileData = fs.readFileSync(`${txtFilesPath}/${fileName}`, 'utf8');\n        \n        obj[propertyName] = fileData;\n      }\n    });\n    \n    return obj;\n  } catch (error) {\n    // error handling.\n    return null;\n  }\n};"
  ],
  "codeUsage": [
    "const AddEditablePropsValue = AddEditableProps({}, './txtFilesPath');"
  ],
  "codeExtension": ["js"],
  "inspiringMessage": [
    "\"The only way to do great work is to love what you do.\" - Steve Jobs"
  ],
  "codeImport": [
    "import AddEditableProps from 'plop-templates/Thing/actions/AddEditableProps/AddEditableProps.js';"
  ],
  "codeExport": ["module.exports = AddEditableProps;"],
  "codeImportRelative": [
    "import AddEditableProps from '../../plop-templates/Thing/actions/AddEditableProps/AddEditableProps.js';"
  ],
  "codeUsageReturn": ["return AddEditablePropsValue;"],
  "codeInstall": ["yarn add fs\nyarn add path"],
  "what_we_wanna_do": "Crée une fonction dans un language de programmation spécifique (via Chat GPT, l'I.A. magique)",
  "name": "AddEditableProps",
  "affine_subfolder": "plop-templates/Thing",
  "ask_for_subfolder": "plop-templates/Thing/actions",
  "affine_file_where_we_use": "src/services/YoutubeUploader",
  "ask_for_js_file": "Je veux rien, capiche amigo ?",
  "get_ai_service_language": "Javascript (Node.js)",
  "get_ai_service_args": "obj (un objet dans lequel on veut ajouter des données), txtFilesPath (string, le path du dossier contenant les fichiers txt)",
  "get_ai_service_description": "Pour chaque fichier txt existant dans le dossier txtFilesPath, ajoute dans l'objet obj une property ayant comme nom le nom du fichier txt, sans extension, et ayant comme valeur le contenu du fichier txt. enfin, retourne obj, ou null si erreur.",
  "get_ai_service_return_value": "Pour chaque fichier txt existant dans le dossier txtFilesPath, ajoute dans l'objet obj une property ayant comme nom le nom du fichier txt, sans extension, et ayant comme valeur le contenu du fichier txt. enfin, retourne obj, ou null si erreur.",
  "gold_caviar": null
}
