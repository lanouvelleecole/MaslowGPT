

/* PLOP_INJECT_IMPORT */ import { GetUniqueID } from
"src/services/GetUniqueID/GetUniqueID"; import i18n from "i18n-js"; //**import {
SqliteReduxSomePrettyPage } from
"src/reduxState/SomePrettyPage/SomePrettyPageGetterSetter"; //**import {
SqliteReduxSomePrettyPageState } from
"src/reduxState/SomePrettyPageState/SomePrettyPageStateGetterSetter"; /*
PLOP_INJECT_GLOBAL_CODE */ /** * * Le .... */ const
{{pascalCase name}}
= () => { /* PLOP_INJECT_CODE */ // Tout ceci peut servir dans le cas ou // on
crée une question qui crée/edit des données d'un item de page //**const
SomePrettyPageState =
SqliteReduxSomePrettyPageState.GetSomePrettyPageStateFirstRow(); //**const
currentItemUniqueId = SomePrettyPageState.itemUniqueId; //**const currentItem =
SqliteReduxSomePrettyPage.GetItemByUniqueID(currentItemUniqueId); return { // un
identifiant unique id: GetUniqueID(), // un nom, nous permettant de gérer les
récup de réponses choisies/écrites name: "{{pascalCase name}}", type: "text",
//"text" || "number" || "choices" || "custom", // requis description: ({
answers, answer, answerIndex }) => { return i18n.t("question"); }, // requis, si
"type" === "choices" choices: ({ answers, answer, answerIndex }) => { return [ {
choiceDescription: i18n.t("oui"), choiceValue: true, choiceImgUrl: "",
choiceImgPath: "", greenCheckmark: answer?.value == true, onChoiceClicked: () =>
{ }, }, { choiceDescription: i18n.t("non"), choiceValue: false, choiceImgUrl:
"", choiceImgPath: "", greenCheckmark: answer?.value == false, onChoiceClicked:
() => { }, }, ]; }, // la valeur choisie/écrite par l'user // null (par défaut)
value: null, // callback de text changé (en mode "text") onTextChanged:
(newText) => { }, // la valeur par défaut a mettre dans le text input //
(optionnel) defaultValue: ({ answers, answer, answerIndex }) => "", // les flex
du message ou de la zone d'input messageFlex: 1, componentFlex: 1, // la taille
du texte du message messageFontSize: 25, // on montre le component d'input en
premier, ou pas ? componentFirst: true, // un callback qui vérifie que l'input
est valide // (optionnel) // true si valide false autrement checkInput: ({
input, answers, answer, answerIndex }) => { return input != null && input.length
> 0; }, // un message d'erreur à afficher si les données ne sont pas valides
errMsg: ({ answers, answer, answerIndex }) => { return i18n.t('TypeSomePlz'); },
// la callback de customization customQuestionPanel: ({ answers, answer,
answerIndex, onInput }) => { return; }, }; }; export {
{{pascalCase name}}
};