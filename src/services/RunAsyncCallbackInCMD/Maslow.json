{
  "gptOutput": "\n\n// PLOP_CODE_START\nimport MakeLoadingSpinner from 'plop-templates/Commands/actions/RunAsyncCallbackInCMD/makeLoadingSpinner';\n\n/**\n * RunAsyncCallbackInCMD\n *\n * @description Executes an async callback and prints successMsg or errorMsg accordingly\n *\n * @param {(callback: Function) => void} asyncCallback An asynchronous function doing some work\n * @param {string} waitMsg The message to be printed while the async callback is running \n * @param {string} successMsg The success message\n * @param {string} errorMsg The error message\n *\n * @returns {void | number} Returns 42 if ahyncCallback ran successfully, -1 if there was an error\n */\nasync function RunAsyncCallbackInCMD(\n\tasyncCallback,\n\twaitMsg,\n\tsuccessMsg,\n\terrorMsg\n) {\n\t// PLOP_INJECT_CODE\n\t/* PLOP_INJECT_CODE */\n\tconst stopSpinner = MakeLoadingSpinner(waitMsg);\n\n\ttry {\n\t\tawait asyncCallback();\n\t\tstopSpinner();\n\t\tconsole.log(successMsg);\n\t\treturn 42;\n\t} catch (error) {\n\t\tstopSpinner();\n\t\tconsole.error(errorMsg);\n\t\treturn -1;\n\t}\n}\n\n// PLOP_CODE_END\n\n// PLOP_CODE_USE_START \nconst RunAsyncCallbackInCMDValue = RunAsyncCallbackInCMD(\n\tasync () => {\n\t\t// Do the async work\n\t}, \n\t'Running the async workload...',\n\t'All tasks completed',\n\t'An error occured.'\n)\n// PLOP_CODE_USE_END\n\n// PLOP_CODE_USE_RETURN_START \nreturn RunAsyncCallbackInCMDValue;\n// PLOP_CODE_USE_RETURN_END\n\n// PLOP_CODE_EXTENSION_START\njs\n// PLOP_CODE_EXTENSION_END\n\n// PLOP_CODE_EXPORT_START\nmodule.exports = RunAsyncCallbackInCMD;\n// PLOP_CODE_EXPORT_END\n\n// PLOP_CODE_IMPORT_START\nimport RunAsyncCallbackInCMD from 'plop-templates/Commands/actions/RunAsyncCallbackInCMD/RunAsyncCallbackInCMD.js';\n// PLOP_CODE_IMPORT_END\n\n// PLOP_CODE_IMPORT_RELATIVE_START\nimport RunAsyncCallbackInCMD from '../../../plop-templates/Commands/actions/RunAsyncCallbackInCMD/RunAsyncCallbackInCMD.js';\n// PLOP_CODE_IMPORT_RELATIVE_END\n\n// PLOP_COMMAND_LINE_INSTALL_START\nyarn add plop-templates/Commands/actions/RunAsyncCallbackInCMD/makeLoadingSpinner\n// PLOP_COMMAND_LINE_INSTALL_END\n\n// PLOP_INSPIRING_MESSAGE_START\n\"If you don't have time to do it right, when will you have time to do it over?\" - John Wooden\n// PLOP_INSPIRING_MESSAGE_END",
  "mainCode": [
    "import MakeLoadingSpinner from 'plop-templates/Commands/actions/RunAsyncCallbackInCMD/makeLoadingSpinner';\n\n/**\n * RunAsyncCallbackInCMD\n *\n * @description Executes an async callback and prints successMsg or errorMsg accordingly\n *\n * @param {(callback: Function) => void} asyncCallback An asynchronous function doing some work\n * @param {string} waitMsg The message to be printed while the async callback is running \n * @param {string} successMsg The success message\n * @param {string} errorMsg The error message\n *\n * @returns {void | number} Returns 42 if ahyncCallback ran successfully, -1 if there was an error\n */\nasync function RunAsyncCallbackInCMD(\n\tasyncCallback,\n\twaitMsg,\n\tsuccessMsg,\n\terrorMsg\n) {\n\t// PLOP_INJECT_CODE\n\t/* PLOP_INJECT_CODE */\n\tconst stopSpinner = MakeLoadingSpinner(waitMsg);\n\n\ttry {\n\t\tawait asyncCallback();\n\t\tstopSpinner();\n\t\tconsole.log(successMsg);\n\t\treturn 42;\n\t} catch (error) {\n\t\tstopSpinner();\n\t\tconsole.error(errorMsg);\n\t\treturn -1;\n\t}\n}"
  ],
  "codeUsage": [
    "const RunAsyncCallbackInCMDValue = RunAsyncCallbackInCMD(\n\tasync () => {\n\t\t// Do the async work\n\t}, \n\t'Running the async workload...',\n\t'All tasks completed',\n\t'An error occured.'\n)"
  ],
  "codeExtension": ["js"],
  "inspiringMessage": [
    "\"If you don't have time to do it right, when will you have time to do it over?\" - John Wooden"
  ],
  "codeImport": [
    "import RunAsyncCallbackInCMD from 'plop-templates/Commands/actions/RunAsyncCallbackInCMD/RunAsyncCallbackInCMD.js';"
  ],
  "codeExport": ["module.exports = RunAsyncCallbackInCMD;"],
  "codeImportRelative": [
    "import RunAsyncCallbackInCMD from '../../../plop-templates/Commands/actions/RunAsyncCallbackInCMD/RunAsyncCallbackInCMD.js';"
  ],
  "codeUsageReturn": ["return RunAsyncCallbackInCMDValue;"],
  "codeInstall": [
    "yarn add plop-templates/Commands/actions/RunAsyncCallbackInCMD/makeLoadingSpinner"
  ],
  "what_we_wanna_do": "Crée une fonction dans un language de programmation spécifique (via Chat GPT, l'I.A. magique)",
  "name": "RunAsyncCallbackInCMD",
  "affine_subfolder": "plop-templates/Thing",
  "ask_for_subfolder": "plop-templates/Commands/actions",
  "affine_file_where_we_use": "src/services/YoutubeUploader",
  "ask_for_js_file": "src/services/YoutubeUploader/YoutubeUploader.js",
  "function_import_type": "Path relatif",
  "function_returns_or_not": "Sans ligne return",
  "delete_function_body_or_not": "Oui",
  "get_ai_service_language": "javascript (node.js)",
  "get_ai_service_args": "asyncCallback (une fonction asynchrone, faisant du boulot), waitMsg (string, le message à afficher durant attente de asyncCallback), successMsg (string, le message de succès), errorMsg (string, le message d'erreur). Use object literal notation for all the arguments.",
  "get_ai_service_description": "print waitMsg, puis exécute asyncCallback. si y'a pas eu d'erreur, print successMsg. Si erreur, print errorMsg.",
  "get_ai_service_return_value": "crée une variable stopSpinner = <le résultat de l'exécution de MakeLoadingSpinner avec waitMsg comme arg>. Ensuite, exécute la callback asynchrone asyncCallback, avec await. Si la callback s'est exécutée sans erreur, alors exécute la callback stopSpinner, puis print successMsg. Si erreur, alors exécute la callback stopSpinner, et print errorMsg. Retourne 42, si succès, ou -1 si erreur.",
  "gold_caviar": null
}
